from flask import Flask, render_template
import asyncio
import websockets
from threading import Thread
import json
import time

app = Flask(__name__)

clients = {}  # 将clients变量从集合改为字典
equip_and_diamonds_data = {}  # 存储装备和钻石信息的字典
processed_clients = set()  # 创建一个新的集合，用于存储已经处理过的客户端的远程地址
number_counter = 0  # 在websocket_handler函数外部定义一个全局变量,用来计算接收到的number数量

@app.route('/')
def index():
    return render_template('index.html')




async def reset_all_clients():
    # 重置每个客户端字典中的 'number' 数据而不是清除整个字典
    for client in clients.values():
        client.pop('number', None)  # 移除客户端的 'number' 键值，如果不存在则不做操作

    # 清空 processed_clients 集合
    processed_clients.clear()

    # 清空装备和钻石信息
    equip_and_diamonds_data.clear()

    # 打印重置后状态的日志
    print("所有客户端匹配数据已重置。")
    # 不需要打印 clients 字典中的条目数量，因为我们没有清除 clients
    print(f"processed_clients 集合中的条目数量：{len(processed_clients)}")  # 打印清除后 processed_clients 的信息数量

async def notify_clients(message):
    if clients:  # 如果有客户端连接
        payload = json.dumps(message)
        tasks = [asyncio.create_task(client['websocket'].send(payload)) for client in clients.values()]
        await asyncio.wait(tasks)

async def register(websocket):
    clients[websocket.remote_address] = {'websocket': websocket}  # 当新的客户端连接时，为这个客户端创建一个新的字典，并将websocket连接对象存储在这个字典中
    print(f"New client connected: {websocket.remote_address}")  # 打印一条消息来确认新的客户端已经连接
    await notify_clients({'type': 'connect', 'msg': f"New client connected: {websocket.remote_address}", 'clientCount': len(clients)}) # 发送给所有客户端

async def unregister(websocket):
    del clients[websocket.remote_address]  # 当客户端断开连接时，删除这个客户端的字典
    print(f"Client disconnected: {websocket.remote_address}")  # 打印一条消息来确认新的客户端已经断开
    await notify_clients({'type': 'disconnect', 'msg': f"Client disconnected: {websocket.remote_address}", 'clientCount': len(clients) })
    processed_clients.discard(websocket.remote_address)  # 移除断开连接的客户端

async def send_message_to_client(remote_address, message):
    client = clients.get(remote_address)
    if client is not None:
        try:
            payload = json.dumps(message)  # 确保消息被序列化为JSON字符串
            await client['websocket'].send(payload)
            print(f"Message sent to {remote_address}: {message}")  # 打印日志消息
        except Exception as e:
            print(f"Error sending message to {remote_address}: {e}")  # 打印错误日志

async def process_equip_and_diamonds():
    matches_count = 0
    print(f"开始处理装备和钻石匹配，客户端数量: {len(clients)}")
    # 遍历字典处理每个客户端的装备和钻石数据
    for address, equip_data in equip_and_diamonds_data.items():
        for equip_item in equip_data:
            number, equip_name = equip_item
            for client_address, client_info in clients.items():
                if client_info.get('number') == number and client_address not in processed_clients:
                    response = {'type': 'equipanddiamondsmatches','msg': {'number': number, 'equip_name': equip_name}}
                    await send_message_to_client(client_address, response)
                    matches_count += 1
                    processed_clients.add(client_address)
                    break
                    #print(f"Matched client {client_address} with number {number} and {equip_name}")
        # 匹配完一个客户端后从字典中删除该客户端的数据
        #del equip_and_diamonds_data[address]
    print(f"Matched {matches_count} clients successfully.")

async def websocket_handler(websocket, path): #发送信息给客户端用
    global number_counter  # 在函数内部声明这个变量是全局的

    await register(websocket)
    try:
        async for message in websocket:
            data = json.loads(message)
            if data['type'] == 'shangjia':
                response = {'type': 'shangjia', 'msg': 'zhijieshangjiachibang'}
                await notify_clients(response)  # 发送给所有客户端
                print(f"Sent message to Lua client: {response}")
            elif data['type'] == 'command':
                if data['msg'] == 'zuanshishuliang':
                    await reset_all_clients()
                    number_counter = 0  # 重置 number_counter
                elif data['msg'] == 'zhaozhuangbeizuanshi':
                    equip_and_diamonds_data.clear()
                    print("装备和钻石信息已清空。")
                # 当接收到 "识别钻石" 的命令时，首先重置客户端数据

                # 可以通知所有网页端客户端已经重置
                #await notify_clients({'type': 'reset_clients', 'msg': 'All client data has been reset.'})
                response = {'type': 'command', 'msg': data['msg']}
                await notify_clients(response)  # 发送给所有客户端
                print(f"Sent command to Lua client: {response}")
            elif data['type'] == 'number':

                try:
                    client_number = int(data['msg'])  # 将接收到的数字转换为整数
                    clients[websocket.remote_address]['number'] = client_number
                    #clients[websocket.remote_address]['number'] = data['msg']  # 将客户端发送的消息存储在这个客户端的字典中
                    print(f"Received number from {websocket.remote_address}: {client_number}")
                    response = {'type': 'number', 'msg': data['msg']}
                    await notify_clients(response)
                except ValueError:
                    print(f"Invalid number received from {websocket.remote_address}: {data['msg']}")
                number_counter += 1
                print(f"共有客户端反馈钻石总消息: {number_counter}")  # 打印接收到的有多少个客户端反馈 'number' 消息的总数量
                #await notify_clients({'type': 'number_counter', 'msg': number_counter})

            elif data['type'] == 'zhaozhuangbeizuanshi':
                print(f"Received equip and diamonds from {websocket.remote_address}: {data['msg']}")
                time.sleep(1)
            elif data['type'] == 'equipanddiamonds':
                #print(f"处理 equipanddiamonds 消息前客户端数量: {len(clients)}")
                # 仅保存装备和钻石数据
                equip_and_diamonds_data[websocket.remote_address] = data['msg']
                await notify_clients({'type': 'equipanddiamonds', 'msg': data['msg']})
                print(f"接收到的装备和钻石数据: {data['msg']}")

            elif data['type'] == 'start_matching':
                # 当接收到 'start_matching' 指令时开始匹配装备和钻石
                time.sleep(1)
                await process_equip_and_diamonds()
            elif data['type'] == 'buy_complete':

                client_info = clients.get(websocket.remote_address)
                if client_info:
                    # 从客户端信息中获取购买的对应数字
                    client_number = client_info.get('number', '未知数字')
                    # 打印购买完成的客户端地址和对应的数字
                    print(f"购买完成的客户端: {websocket.remote_address} 购买的数字: {client_number}: {data}")
                    # 发送匹配成功的消息给网页端，指示其删除客户端的number信息
                    await notify_clients({
                        'type': 'match_success',
                        'number': client_number
                    })
                    #client_number = client_info['number']  # 获取客户端的number信息  # 保存number信息

                    #del client_info['number']  # 删除number信息
                    processed_clients.add(websocket.remote_address)  # 标记客户端为已处理
                    await notify_clients({'type': 'buy_complete','msg': f"Client {websocket.remote_address} completed the purchase"})  # 通知所有客户端该客户端完成购买

                    print(f"Client {websocket.remote_address} completed the purchase and has been marked as processed")

            elif data['type'] == 'reset_clients':
                await reset_all_clients()
                # 可以通知所有网页端客户端已经重置
                await notify_clients({'type': 'reset_clients', 'msg': 'All client data has been reset.'})
            elif data['type'] == 'confirmation':
                print(f"Received confirmation from {websocket.remote_address}: {data['msg']}")
    except websockets.exceptions.ConnectionClosed as e:
        print(f"Client disconnected: {websocket.remote_address}")
        print(f"WebSocket connection closed with error: {e}")  # 打印连接关闭的错误
    except Exception as e:
        # 打印其他所有异常信息
        print(f"An error occurred: {e}")
    finally:
        await unregister(websocket)


def run_flask():
    app.run(host='0.0.0.0', port=5263) # 通过 Flask 运行 Web 应用


def run_websocket_server():
    asyncio.set_event_loop(asyncio.new_event_loop())
    start_server = websockets.serve(websocket_handler, '0.0.0.0', 8765)
    asyncio.get_event_loop().run_until_complete(start_server)
    asyncio.get_event_loop().run_forever()


if __name__ == '__main__':
    # 创建一个线程运行 Flask 应用
    t1 = Thread(target=run_flask)

    # 创建一个线程运行 WebSocket 服务器
    t2 = Thread(target=run_websocket_server)

    t1.start()
    t2.start()

    t1.join()
    t2.join()
